

docker是一个开源的应用容器引擎，基于go语言并遵从apache2.0协议开源

docker可以让开发者打包他们的应用以及依赖包到一个轻量级，可移植的容器中，
然后发布到任何流行的linux机器上，也可以实现虚拟化

容器是完全使用沙箱机制，相互之间不会有任何接口(类似IPhone的app)
更重要的是容器性能开下很低

docker的应用场景


１．web应用的自动化打包和发布
２．　自动化测试和持续集成，发布
３．　在服务型环境中部署和调整数据库或其他的后台应用
４．　从头编译或扩展现有的OpenShift或Cloud Foundry平台
来搭建自己的PassS环境

docker是一个用于开发，交付和运行以后用程序的开放平台．

docker能将应用程序和基础架构分开，从而跨苏交付软件

１　容器非常适合持续集成和持续交付(CI/CD)工作流程

３．响应式部署和扩展

docker是基于容器的平台，允许高度可移植的工作负载，docker容器可以在开发人员的本机上，数据中心的物理或虚拟机上，云服务器上或混合环境中运行


3.在同一硬件上运行更多负载

docker非常适合与高密度环境以及中小型部署

docker架构


docke包括３个概念


镜像－－－－容器－－－－仓库

１．镜像(Image)，相当于是一个root文件系统．
２．容器(Container)，镜像与容器的关系，就像是面向对象程序中的类和实例一样，
镜像是静态的定义，容易是镜像运行时的实体

容器可以被创建，启动，停止，删除和暂定


３．　仓库(Respoitory):仓库可以看作一个代码控制中心，用来保存镜像


docker使用客户端－服务器(c/s)架构模式，使用远程api来管理和创建docker容器

docker容器荣国docker镜像来创建


docker镜像是用于创建docker容器的模板，比如ubuntu系统
容器是独立运行的一个或一组应用，是镜像运行时的实体
docker客户端(client)通过命令行或其他工具docker sdk与docker的守护进行通信

docker主机(host)是一个物理或虚拟的机器用于自行docker守护进程和容器


docker仓库(Registry) 仓库用来保存镜像，可以理解为代码控制中的代码仓库

docker hub提供庞大的镜像集合供使用．

一个docker registry中可以包含多个仓库(repository),
每个仓库可以包含多个标签(tag)每个标签对应一个镜像

通常，一个仓库会包含同一个软件不同版本的镜像，而标签就常用于对应该软件的
各个版本，可以通过<仓库名>:<标签>的格式来指定具体是这个软件哪个版本的镜像
如果不给出标签，将以latest作为默认标签


docker　machine  是一个简化的docker安装的命令行工具



centos　安装docker

docker 使用　

https://www.runoob.com/docker/docker-hello-world.html

