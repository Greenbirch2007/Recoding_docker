

docker是一个开源的应用容器引擎，基于go语言并遵从apache2.0协议开源

docker可以让开发者打包他们的应用以及依赖包到一个轻量级，可移植的容器中，
然后发布到任何流行的linux机器上，也可以实现虚拟化

容器是完全使用沙箱机制，相互之间不会有任何接口(类似IPhone的app)
更重要的是容器性能开下很低

docker的应用场景


１．web应用的自动化打包和发布
２．　自动化测试和持续集成，发布
３．　在服务型环境中部署和调整数据库或其他的后台应用
４．　从头编译或扩展现有的OpenShift或Cloud Foundry平台
来搭建自己的PassS环境

docker是一个用于开发，交付和运行以后用程序的开放平台．

docker能将应用程序和基础架构分开，从而跨苏交付软件

１　容器非常适合持续集成和持续交付(CI/CD)工作流程

３．响应式部署和扩展

docker是基于容器的平台，允许高度可移植的工作负载，docker容器可以在开发人员的本机上，数据中心的物理或虚拟机上，云服务器上或混合环境中运行


3.在同一硬件上运行更多负载

docker非常适合与高密度环境以及中小型部署

docker架构


docke包括３个概念


镜像－－－－容器－－－－仓库

１．镜像(Image)，相当于是一个root文件系统．
２．容器(Container)，镜像与容器的关系，就像是面向对象程序中的类和实例一样，
镜像是静态的定义，容易是镜像运行时的实体

容器可以被创建，启动，停止，删除和暂定


３．　仓库(Respoitory):仓库可以看作一个代码控制中心，用来保存镜像


docker使用客户端－服务器(c/s)架构模式，使用远程api来管理和创建docker容器

docker容器荣国docker镜像来创建


docker镜像是用于创建docker容器的模板，比如ubuntu系统
容器是独立运行的一个或一组应用，是镜像运行时的实体
docker客户端(client)通过命令行或其他工具docker sdk与docker的守护进行通信

docker主机(host)是一个物理或虚拟的机器用于自行docker守护进程和容器


docker仓库(Registry) 仓库用来保存镜像，可以理解为代码控制中的代码仓库

docker hub提供庞大的镜像集合供使用．

一个docker registry中可以包含多个仓库(repository),
每个仓库可以包含多个标签(tag)每个标签对应一个镜像

通常，一个仓库会包含同一个软件不同版本的镜像，而标签就常用于对应该软件的
各个版本，可以通过<仓库名>:<标签>的格式来指定具体是这个软件哪个版本的镜像
如果不给出标签，将以latest作为默认标签


docker　machine  是一个简化的docker安装的命令行工具



centos　安装docker

docker 使用　


docker hello world


docker允许你在容器内运行应用程序，使用docker run命令在容器内运行一个应用程序


docker run ubuntu:15.10 /bin/echo "Hello world"


参数解析docker :docker的二进制执行文件
run: 与前面的docker组合来运行一个容器
echos7:执行要运行的镜像，docker首先从本地主机上查找镜像是否存在，如果不存在
，docker就会从镜像残酷docker hub中下载公共镜像


/bin/echo "hello world":在启动的容器里执行的命令


docker以centos 7镜像创建一个新容器，然后在容器里执行bin/echo"hello world"
然后输出结果



进行交互式的容器


通过docker 的两个参数 -i -t,让docker运行的容器实现"对话"的能力


docker run -i -t ubuntu:15.10 /bin/bash


参数解析

-t :在新容器内指定一个伪终端或终端
-i:允许你在对容器内的标准输入(STDIN)进行交互



注意进入centos7系统的容器

启动容器(后台模式)

使用命令创建一个以进程方式运行的容器


docker run -d ubuntu:15.10 /bin/sh -c "while true; do echo hello world; sleep 1; done"


出现的长字符串叫做容器ID,对每个容器来说都是唯一的，我们可以通过容器ID来查看
对应的容器发生了什么


首先，需要确认容器有在运行，可通过docker ps 来查看

参数详情


CONTAINER ID :容器ID
IMAGE :使用的镜像
COMMAND:启动容器时运行的命令
CREATED:容器的创建时间
STATUS:容器状态


状态有７种：


created(已创建)
restarting(重启中)
running(运行中)
removing(迁移中)
paused(暂停)
exited(停止)
dead(死亡)


PORTS :容器的端口信息和使用的连接类型(tcp/udp)

NAMES:自动分配的容器名称


在宿主主机内还是用docker logs来查看容器内的标准输出

停止容器

docker stop 


docker 容器使用


docker客户端


容器使用

获取镜像

使用docker pull 来载入ubuntu镜像

docker pull ubuntu

启动镜像


使用ubuntu镜像启动一个容器，参数为以命令行模式进入该容器：


docker run -it ubuntu /bin/bash

参数解析

-i 交互式操作
-t 终端

ubuntu:ubuntu镜像
/bin/bash:放在镜像名后面是命令，


启动已停止运行的容器


查看所有的容器命令　　docker ps -a


使用docker start启动一个已停止的容器


后台运行


在大部分的场景下，希望docker的服务是在后台运行的，可以通过-d指定容器的运行模式


docker run -itd --name ubuntu-test ubuntu /bin/bash

加了-d 参数默认不会进入容器，想要进入容器需要使用指令docker exec


停止一个容器


docker stop <容器ID>

停止的容器可以通过docker restart重启

docker restart <容器ID>

进入容器


在使用-d参数时，容器启动后会进入后台，此时想要进入容器，可以通过以下指令进入

1. docker attach

2.  docker exec: 推荐使用　docker exec命令，因为此退出容器终端，不会
导致容器的停止



docker attach 30bf7fa6841c


注意，如果从这个容器退出，会导致容器的停止


docker exec -it 30bf7fa6841c /bin/bash




注意，如果从这个容器退出，不会导致容器的停止，

导出和导入容器

如果要导出本地某个容器，可以使用docker export 命令


docker export 30bf7fa6841c > ubuntu.tar

导出容器　30bf7fa6841c　快照到本地文件ubuntu.tar


这样将导出容器快照到本地文件


导入容器快照


可以使用docker import 从容器快照文件中再导入为镜像，
以下实例将快照文件ubuntu.tar 导入到镜像test/uuuuuu:v1:


cat docker/ubuntu.tar | docker import - test/uuuu:v1

使用

docker images查看当前拉取的镜像

此外，也可以通过指定URL或某个目录来导入

docker import http://example.com/exampleimage.tgz example/imagerepo



删除容器

docker rm -f 00b55a4d1b8a


下面的命令可以清理掉所有处于终止状态的容器


docker container prune


运行一个web应用


使用docker构建一个web应用陈旭

在docker容器应运行一个flask的应用


runoob@runoob:~# docker pull training/webapp  # 载入镜像
runoob@runoob:~# docker run -d -P training/webapp python app.py


参数解析


-d:让容器在后台运行
-P:将容器内部使用的网络端口映射到我们使用的主机上

这里多了端口信息。

PORTS
0.0.0.0:32769->5000/tcp

docker开发了5000端口(默认flask端口)映射到主机端口32769上

也可以通过-p参数来设置不一样的端口

docker run -d -p 5000:5000 training/webapp python app.py


docker run -d -p 8989:5000 training/webapp python app.py

容器内部的5000端口映射到本机的8989端口上


网络端口的快捷方式


通过docker ps命令可以产看容器的端口映射，docker还提供了一个快捷方女士说

docker port 可以查看指定(ID或名字)容器的某个确定端口映射到宿主机的端口号

docker port bf08b7f2cd89

查看web应用程序日志


docker logs [ID或名字]可以查看容器内部的标准输出



docker logs -f 3879e9cb8fbc

-f:让docker logs像使用tail -f一样来输出容器内部的标准输出

从上面，可以看到应用程序还是用的是5000端口并且能够查看到应用程序的访问日志



查看web应用程序容器的进程

可以使用docker top 来查看容器内部运行的进程

docker top  3879e9cb8fbc

检查web应用程序

使用docker inspect来查看docker的底层信息
它会返回一个json文件记录着docker容器的配置和状态信息

docker inspect  3879e9cb8fbc


停止web应用容器

docker stop  3879e9cb8fbc

重启web引用重启

docker restart  3879e9cb8fbc

docker ps -l 查询最后一次创建的容器


移除web应用容器


可以使用docker rm来删除不需要的容器


docker rm  3879e9cb8fbc

删除容器时，容器必须是停止状态，否则会报错

Docker 镜像使用

https://www.runoob.com/docker/docker-image-usage.html


