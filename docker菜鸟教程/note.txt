

docker是一个开源的应用容器引擎，基于go语言并遵从apache2.0协议开源

docker可以让开发者打包他们的应用以及依赖包到一个轻量级，可移植的容器中，
然后发布到任何流行的linux机器上，也可以实现虚拟化

容器是完全使用沙箱机制，相互之间不会有任何接口(类似IPhone的app)
更重要的是容器性能开下很低

docker的应用场景


１．web应用的自动化打包和发布
２．　自动化测试和持续集成，发布
３．　在服务型环境中部署和调整数据库或其他的后台应用
４．　从头编译或扩展现有的OpenShift或Cloud Foundry平台
来搭建自己的PassS环境

docker是一个用于开发，交付和运行以后用程序的开放平台．

docker能将应用程序和基础架构分开，从而跨苏交付软件

１　容器非常适合持续集成和持续交付(CI/CD)工作流程

３．响应式部署和扩展

docker是基于容器的平台，允许高度可移植的工作负载，docker容器可以在开发人员的本机上，数据中心的物理或虚拟机上，云服务器上或混合环境中运行


3.在同一硬件上运行更多负载

docker非常适合与高密度环境以及中小型部署

docker架构


docke包括３个概念


镜像－－－－容器－－－－仓库

１．镜像(Image)，相当于是一个root文件系统．
２．容器(Container)，镜像与容器的关系，就像是面向对象程序中的类和实例一样，
镜像是静态的定义，容易是镜像运行时的实体

容器可以被创建，启动，停止，删除和暂定


３．　仓库(Respoitory):仓库可以看作一个代码控制中心，用来保存镜像


docker使用客户端－服务器(c/s)架构模式，使用远程api来管理和创建docker容器

docker容器荣国docker镜像来创建


docker镜像是用于创建docker容器的模板，比如ubuntu系统
容器是独立运行的一个或一组应用，是镜像运行时的实体
docker客户端(client)通过命令行或其他工具docker sdk与docker的守护进行通信

docker主机(host)是一个物理或虚拟的机器用于自行docker守护进程和容器


docker仓库(Registry) 仓库用来保存镜像，可以理解为代码控制中的代码仓库

docker hub提供庞大的镜像集合供使用．

一个docker registry中可以包含多个仓库(repository),
每个仓库可以包含多个标签(tag)每个标签对应一个镜像

通常，一个仓库会包含同一个软件不同版本的镜像，而标签就常用于对应该软件的
各个版本，可以通过<仓库名>:<标签>的格式来指定具体是这个软件哪个版本的镜像
如果不给出标签，将以latest作为默认标签


docker　machine  是一个简化的docker安装的命令行工具



centos　安装docker

docker 使用　


docker hello world


docker允许你在容器内运行应用程序，使用docker run命令在容器内运行一个应用程序


docker run ubuntu:15.10 /bin/echo "Hello world"


参数解析docker :docker的二进制执行文件
run: 与前面的docker组合来运行一个容器
echos7:执行要运行的镜像，docker首先从本地主机上查找镜像是否存在，如果不存在
，docker就会从镜像残酷docker hub中下载公共镜像


/bin/echo "hello world":在启动的容器里执行的命令


docker以centos 7镜像创建一个新容器，然后在容器里执行bin/echo"hello world"
然后输出结果



进行交互式的容器


通过docker 的两个参数 -i -t,让docker运行的容器实现"对话"的能力


docker run -i -t ubuntu:15.10 /bin/bash


参数解析

-t :在新容器内指定一个伪终端或终端
-i:允许你在对容器内的标准输入(STDIN)进行交互



注意进入centos7系统的容器

启动容器(后台模式)

使用命令创建一个以进程方式运行的容器


docker run -d ubuntu:15.10 /bin/sh -c "while true; do echo hello world; sleep 1; done"


出现的长字符串叫做容器ID,对每个容器来说都是唯一的，我们可以通过容器ID来查看
对应的容器发生了什么


首先，需要确认容器有在运行，可通过docker ps 来查看

参数详情


CONTAINER ID :容器ID
IMAGE :使用的镜像
COMMAND:启动容器时运行的命令
CREATED:容器的创建时间
STATUS:容器状态


状态有７种：


created(已创建)
restarting(重启中)
running(运行中)
removing(迁移中)
paused(暂停)
exited(停止)
dead(死亡)


PORTS :容器的端口信息和使用的连接类型(tcp/udp)

NAMES:自动分配的容器名称


在宿主主机内还是用docker logs来查看容器内的标准输出

停止容器

docker stop 


docker 容器使用


docker客户端


容器使用

获取镜像

使用docker pull 来载入ubuntu镜像

docker pull ubuntu

启动镜像


使用ubuntu镜像启动一个容器，参数为以命令行模式进入该容器：


docker run -it ubuntu /bin/bash

参数解析

-i 交互式操作
-t 终端

ubuntu:ubuntu镜像
/bin/bash:放在镜像名后面是命令，


启动已停止运行的容器


查看所有的容器命令　　docker ps -a


使用docker start启动一个已停止的容器


后台运行


在大部分的场景下，希望docker的服务是在后台运行的，可以通过-d指定容器的运行模式


docker run -itd --name ubuntu-test ubuntu /bin/bash

加了-d 参数默认不会进入容器，想要进入容器需要使用指令docker exec


停止一个容器


docker stop <容器ID>

停止的容器可以通过docker restart重启

docker restart <容器ID>

进入容器


在使用-d参数时，容器启动后会进入后台，此时想要进入容器，可以通过以下指令进入

1. docker attach

2.  docker exec: 推荐使用　docker exec命令，因为此退出容器终端，不会
导致容器的停止



docker attach 30bf7fa6841c


注意，如果从这个容器退出，会导致容器的停止


docker exec -it 30bf7fa6841c /bin/bash




注意，如果从这个容器退出，不会导致容器的停止，

导出和导入容器

如果要导出本地某个容器，可以使用docker export 命令


docker export 30bf7fa6841c > ubuntu.tar

导出容器　30bf7fa6841c　快照到本地文件ubuntu.tar


这样将导出容器快照到本地文件


导入容器快照


可以使用docker import 从容器快照文件中再导入为镜像，
以下实例将快照文件ubuntu.tar 导入到镜像test/uuuuuu:v1:


cat docker/ubuntu.tar | docker import - test/uuuu:v1

使用

docker images查看当前拉取的镜像

此外，也可以通过指定URL或某个目录来导入

docker import http://example.com/exampleimage.tgz example/imagerepo



删除容器

docker rm -f 00b55a4d1b8a


下面的命令可以清理掉所有处于终止状态的容器


docker container prune


运行一个web应用


使用docker构建一个web应用陈旭

在docker容器应运行一个flask的应用


runoob@runoob:~# docker pull training/webapp  # 载入镜像
runoob@runoob:~# docker run -d -P training/webapp python app.py


参数解析


-d:让容器在后台运行
-P:将容器内部使用的网络端口映射到我们使用的主机上

这里多了端口信息。

PORTS
0.0.0.0:32769->5000/tcp

docker开发了5000端口(默认flask端口)映射到主机端口32769上

也可以通过-p参数来设置不一样的端口

docker run -d -p 5000:5000 training/webapp python app.py


docker run -d -p 8989:5000 training/webapp python app.py

容器内部的5000端口映射到本机的8989端口上


网络端口的快捷方式


通过docker ps命令可以产看容器的端口映射，docker还提供了一个快捷方女士说

docker port 可以查看指定(ID或名字)容器的某个确定端口映射到宿主机的端口号

docker port bf08b7f2cd89

查看web应用程序日志


docker logs [ID或名字]可以查看容器内部的标准输出



docker logs -f 3879e9cb8fbc

-f:让docker logs像使用tail -f一样来输出容器内部的标准输出

从上面，可以看到应用程序还是用的是5000端口并且能够查看到应用程序的访问日志



查看web应用程序容器的进程

可以使用docker top 来查看容器内部运行的进程

docker top  3879e9cb8fbc

检查web应用程序

使用docker inspect来查看docker的底层信息
它会返回一个json文件记录着docker容器的配置和状态信息

docker inspect  3879e9cb8fbc


停止web应用容器

docker stop  3879e9cb8fbc

重启web引用重启

docker restart  3879e9cb8fbc

docker ps -l 查询最后一次创建的容器


移除web应用容器


可以使用docker rm来删除不需要的容器


docker rm  3879e9cb8fbc

删除容器时，容器必须是停止状态，否则会报错

Docker 镜像使用



当容器时，使用的惊喜那个如果在本地不存在，docker就会自动从docker镜像
仓库下载，默认是docker　hub公共镜像下载


管理和使用本地docker主机镜像
创建镜像


列出镜像列表

可以使用docker images 来列出本地主机上的镜像

docker images

参数说明

repository 表示镜像的仓库源
tag 镜像的标签
image id :镜像id
created  奖项创建时间
size  镜像大小


同一仓库源可以有多个tag,代表这个仓库源的不同版本

使用repository:tag来定义不同的镜像

使用15.10的ubuntu系统镜像来运行容器

docker run -t -i ubuntu:15.10 /bin/bash

参数说明


-i:交互式操作
-t:终端
ubuntu:15.10:这是指用ubuntu 15.10版本镜像为基础来启动容器

/bin/bash:放在镜像名后的是命令，

如果不指定一个镜像的版本标签，docker将默认使用ubuntu:latest静ｉｘａｎｇ

获取一个新的镜像

可以使用docker pull来下载特定的镜像


docker pull ubuntu:13.10


下载完成后，可以直接使用这个镜像来运行容器


查找镜像


可以从docker hub来搜索镜像


也可以使用docker search来搜索镜像．比如我们需要一个httpd
的镜像来作为web服务．


docker search httpd

参数说明

NAME 奖项仓库源的名称
description:镜像的描述
official:是否docker官方发布
stars:类似github的star
automated:自动创建爱你


拖取精酿


docker pull httpd

删除镜像

镜像删除使用docker rmi命令

docker rmi hello-world

创建镜像


１．从已经创建的容器中更新镜像，并且提交这个镜像
２．使用dockerfile指令来创建一个新的镜像


更新镜像

更新镜像之前，需要还是用镜像来创建一个容器

docker run -t -i ubuntu:15.10 /bin/bash

在运行的容器内还是用apt-get update来更新

在完成操作后，输入exit退出容器

docker commit来提交容器副本

docker commit -m="has update" -a="runoob" e218edb10161 runoob/ubuntu:V2


参数说明

-m:提交的描述信息
-a:指定镜像作者
e218edb10161:容器ID
runoob/ubuntu:v2  指定要创建的目标镜像名


docker commit -m="has update" -a="runoob" 9b9cb95443b5 runoob/ubuntu:v2


构建镜像

使用命令docker build,从零开始来创建一个新的镜像．需要创建一个dockerfile文件
其中，包含一组指令来告诉docker如何构建我们的镜像


cat dockerfile

每一个指令都会在镜像上创建一个新的层，每一个指令的前缀必须大写的
第一条FROM,指定使用哪个镜像源
RUN指令告诉docker在镜像内执执行命令，安装了什么

然后，使用Dockerfile文件，通过docker build 命令来构建一个镜像


docker build -t runoob/centos:6.7 .


参数说明

-t : 指定要创建的目标镜像名
. Dockerfile文件所在的目录，可以指定Dockerfile的绝对路径


使用docker images 查看创建的镜像已经在列表中存在，镜像ID

可以使用新的镜像来创建容器


设置镜像标签

可以使用docker tag命令，为惊喜添加一个新的标签



Docker 容器连接

前面实现了通过网络端口来访问运行在docker容器内的服务为


容器中可以运行一些网络应用，要让外部可以访问这些引用，可以通过-P或-p
参数来指定端口映射


下面来实现通过端口连接到一个docker容器


网络端口映射

我们创建了一个python应用的容器

docker run -d -P training/webapp python app.py

另外，可以指定容器绑定的网络地址，比如绑定127.0.0.1



我们使用-P参数创建一个容器，使用docker ps可以看到容器端口5000绑定主机端口32768



我们也可以使用-p表示来指定容器端口绑定到主机端口


两种方法的区别

１．-P 是容器内部端口随机映射到主机的高端口
2. -p 是容器内部端口绑定到指定的主机端口

docker run -d -p 5000:5000 training/webapp python app.py

可以指定容器绑定的网络地址，比如绑定127.0.0.1


docker run -d -p 127.0.0.1:5001:5000 training/webapp python app.py

默认都是绑定tcp端口，如果要绑定UDP端口，可以在端口后面加上/udp


docker run -d -p 127.0.0.1:5000:5000/udp training/webapp python app.py


docker port 可以让我们快捷查看端口的绑定情况


docker port adoring_stonebraker 5000


docker容器互联


端口映射并不是唯一把docker连接到另一个容器的方法


docker 有一个连接系统允许将多个容器连接在一起，共享连接信息
docker连接会有创建一个父子关系，其中父容器可以看到子容器的信息


容器命名


当我们创建一个容器的时候，docker会自动对它进行命名．另外，
我们也可以使用--name标识来命名容器

docker run -d -P --name runoob training/webapp python app.py


docker ps -l　查看最后一个容器名称

新建网络


创建一个新的docker容器

docker network create -d bridge test-net

docker network ls


参数说明


-d 参数指定docker网络类型，有bridge,overlay

其中overlay网络类型用于Swarm mode,


连接容器

运行一个容器连接到新建的test-net网络

docker run -itd --name test1 --network test-net ubuntu /bin/bash


打开新的终端，再运行一个容器并加入到test-net网络

docker run -itd --name test2 --network test-net ubuntu /bin/bash

通过ping来证明test1容器和test2容器建立了互联关系

如果test1,test2容器内中无ping名，则在容器呢执行安装ping(可以在一个容器里
安装好，提交容器到镜像，在以新的镜像重新运行两个容器)


在test1容器输入一下命令


docker exec -it test1 /bin/bash


这样，test1容器和test2容器建立了互联关系

如果你有多个容器之间需要互相连接，推荐使用Docker Compose


配置DNS

可以在宿主机的/etc/docker/daemon.json文件中增加以下内容
来设置全部容器的DNS

{
	"dns":[
		"114.114.114.114",
		"8.8.8.8"	
	]
}

设置后，启动容器的DNS会自动配置为114.114.114.114和8.8.8.8


配置万后，需要重启docker才能生效

sudo service docker restart

查看容器的DNS是否生效可以使用以下命令，它会输出容器的DNS信息

docker run -it --rm ubuntu  cat etc/resolv.conf



手动指定容器的配置


如果只想在指定的容器设置DNS，则可以使用以下命令

docker run -it --rm host_ubuntu  --dns=114.114.114.114 --dns-search=test.com ubuntu

参数说明


-h HOSTNAME 或 --hostname=HOSTNAME:设定容器的主机名，它会被写到
容器内的/etc/hostname和/etc/hosts


-dns=IP_ADDRESS:添加DNS服务器到容器的/etc/resolv.conf中，
让容器用这个服务器来解析所有不在/etc/hosts的主机名


-dns-search=DOMAIN:设定容器的搜索域，当设定搜索域为.example.com时，
在搜索一个名为host的主机时，DNS不仅搜索host,还会搜索host.example.com

如果在容器启动时没有指定--dns和--dns-search，docker会默认用宿主主机
上的/etc/resolv.conf来配置容器的DNS

Docker 仓库管理


仓库(Repository)是集中存放镜像的地方，不止有docker hub,不同远程的服务商，
操作也不同

docker hub


目前docker 官方维护了一个公共仓库docker hub

大部分需求都可以通过docker hub中直接下载镜像来实现



注册一个账号

登录和对出


登录需要输入用户名和密码，登录成功后，就可以从docker hub上拉取自己账号下的全部镜像


docker login

退出

docker logout



拉取镜像

你可以通过docker search命令来差早官方仓库中的镜像，并利用docker pull来将
它下载到本地．以ubuntu为关键词进行搜索

docker pull ubuntu


推送镜像

用户登录后，可以通过docker 


docker tag ubuntu:18.04 greenbirch/ubuntu:18.04
$ docker image ls


docker push  greenbirch/ubuntu:18.04

Docker Dockerfile

Dockerfile是一个用来构建镜像的文本文件，文本内容包含了一一条条构建
镜像所需的指令和说明


使用Dockerfile定制镜像

1.下面以定制一个nginx镜像(构建好的镜像内会有一个/usr/share/nginx/html/index.html文件)


在一个空目录下，新建一个名为Dockerfile文件，并在文件内添加一下内容


mkdir Dockerfile

cd Dockerfile

vi Dockerfile

FROM nginx
RUN echo '这是一个本地构建的nginx镜像' > /usr/share/nginx/html/index.html

2. FROM ,RUN指令的作用

FROM:定制的镜像都是基于FROM的镜像，这里的nginx就是定制需要的基础镜像．
后续的操作都是基于nginx

RUN:用于执行后面跟着的命令行命令，有两种格式

shell格式

RUN <命令行命令>

# <命令行命令>等同于，在终端操作的shell命令


exec格式：


RUN ["可执行文件","参数１","参数２"]

例如：

RUN ["./test/php","dev","offline"] 等价于RUN ./test.php dev offline


注意：Dockerfile的指令每执行一次都会在docker上新建一层
所以过多无意义的层，就会造成镜像膨胀过大



FROM centos
FUN yum install wget \
 && wget -0 redis.tar.gz  "http://download.redis.io/releases/redis-5.0.3.tar.gz" \
 && tar -xvf redis.tar.gz


如上，以&& 符号连接命令，这样执行后，只会创建一层镜像


开始构建镜像


在Dockerfile文件的存放目录下，执行构建动作

在下示例，通过目录下的Dockerfile构建一个nginx:test(镜像名称:镜像标签)

注：最后的.代表本次执行的上下文路径


docker build -t nginx:v3 .

docker images 查询是否构建成功


上下文路径

有提到指令最后一个.是上下文路径

上下文路径，是指docker在构建镜像，有时候想要使用到本机的文件(比如复制)


docker build 命令得知这个路径后，会将路径下的所有内容打包

解析：由于docker的运行模式是c/s

我们本机是c,docker引擎是S

实际的构建过程实在docker引擎下完成的，所以这个时候无法要用到本机的文件
这就需要把我们本机的指定目录下的文件一起打包提供给docker引擎使用


如果未说明最后一个采纳数，那么默认上下文路径及时Dockerfile所在的位置


注意：上下文路径下不要放无用的文件，因为会一起打包发送给docker引擎

如果文件过多会造成过程缓慢


指令详解


COPY

复制指令，从上下文目录中复制文件或目录到容器里指定路径


格式：

COPY[--chown=<user>:<group>] <源路径１>...<目标路径>
COPY[--chown=<user>:<group>] ［"<源路径１>"..."<目标路径>"］


[--chown=<user>:<group>]:可选参数，用户改变复制到容器内文件的拥有者和属组

<源路径>：源文件或源目录，这里可以是通配符表达式，其通配符规则要满足Go的filepath.Match规则

COPY hom* /mydir/

COPY hom>.txt /mydir/



<目标路径>：容器内的指定路径，该路径不用事先建好，路径不存在的话，会自动创建


ADD

ADD指令和COPY的使用格式一致(同样需求下，官方推荐使用COPY)

ADD的优点：在执行<源文件>为tar压缩文件的话，压缩格式为gzip,bzip2以及xz的情况下，会复制并解压到<目标路径>

ADD的缺点：在不解压的前提下，无法复制tar压缩文件，会令镜像构建缓存失效，从而
可能会令镜像构建变得比较缓慢．具体是否使用，可以根据是否需要自动解压来决定


CMD


类似与RUN指令，用于运行程序，但二者运行的时间点不同

CMD 在docker run时运行
RUN 在docker build时运行


CMD作用，为启动的容器指定默认要运行的额程序，程序运行结束，容器也就结束．
CMD指令指定的程序可被docker run命令行参数中指定要运行的程序所覆盖


注意：如果Dockerfile中如果存在多个CMD指令，仅最后一个生效


格式

CMD<shell 命令
CMD["<可执行文件或命令>","<param1>",...]
CMD["<param1>,..."] #该写法是为ENTERPOINT指令指定的程序提供默认参数


推荐使用第二种格式，执行过程比较明确

第一种格式实际上在运行的过程中也会自动转换为第二种格式运行，并且默认可执行
文件是sh


ENTRYPOINT 

类似于CMD指令，但其不会被docker run的命令的命令行参数指定的指令所覆盖


ENV  设置环境变量，定义了环境变量，那么在后续的指令中，就可以使用这个环境变量


ARG构建参数

VOLUMN 定义匿名数据卷，在启动容器时忘记挂载数据卷，会自动挂载到匿名卷

EXPOSE:仅仅声明端口

WORKDIR:指定工作目录

USER:用于指定执行后续命令的用户和用户组，这边只是切换后续命令指定的用户(用户和用户组必须提前已经存在)


HEALTHCHECK:用于指定某个程序或指令来监控docker容器服务的运行状态
ONBUILD:用于延迟构建命令的执行．


Docker Compose


Docker Compose是用于定义和运行多容器Docker应用程序的工具




